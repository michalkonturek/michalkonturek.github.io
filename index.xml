<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Michal Konturek</title><link>https://michal.codes/</link><description>Recent content on Michal Konturek</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Wed, 04 Jun 2014 06:37:10 +0100</lastBuildDate><atom:link href="https://michal.codes/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://michal.codes/about/</link><pubDate>Sun, 10 May 2020 04:52:09 +0100</pubDate><guid>https://michal.codes/about/</guid><description>Hello, I am Michal Konturek. I am a software engineer interested in open-source and mobile development. In my spare time I create awesome things with code, which (most of them) I open source on GitHub.
License All original code on this website is Copyright Â© 2014 Michal Konturek and licensed under the MIT license.</description></item><item><title>Integrating Cocoapods with a Swift project</title><link>https://michal.codes/posts/integrating-cocoapods-with-a-swift-project/</link><pubDate>Wed, 04 Jun 2014 06:37:10 +0100</pubDate><guid>https://michal.codes/posts/integrating-cocoapods-with-a-swift-project/</guid><description>As Apple introduced Swift, their new programming language, you probably wonder how easily you can integrate it with existing Objective-C libraries that are available via CocoaPods.
You begin with creating a Podfile:
pod 'MKUnits', '~&amp;gt; 2.0.0' and running pod install to install pods in your project.
Nice, so far so good. Cocoapods successfully integrated with Xcode 6 project. All we need to do now is to import our pod header file into Swift project.</description></item><item><title>Implementing Unit conversion library</title><link>https://michal.codes/posts/implementing-unit-conversion-library/</link><pubDate>Mon, 01 Jul 2013 18:19:29 +0100</pubDate><guid>https://michal.codes/posts/implementing-unit-conversion-library/</guid><description>Last week I decided to implement unit conversion library for Objective-C called MKUnits. I was fully aware that there were many open-sourced implementation already available, but unfortunately none of them fitted my needs.
I required a library that:
is easily extendable has built-in rounding functionality is precise up to at least 10 decimal places allows manipulation between units of the same group, i.e. kg and pounds, without the need of conversion Quantity Pattern Before I started coding, I had a quick read through the chapter of Analysis Patterns by Martin Fowler, which describes the Quantity Pattern.</description></item></channel></rss>